# -*- coding: utf-8 -*-
"""Logistic Regression training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iOMqAmDNKOnK4dYJrjnj1pccGShKfZ0u
"""

!git config --global user.email "wojteklobo@gmail.com"
!git config --global user.name "xWuWux"
!echo "# Logistic-Regression-training" >> README.md
#!Omit --global

!git init
!git add README.md
!git commit -m "first commit"
!git fetch
!git reset
!git push --set-upstream origin master
!git branch -M main
!git remote add origin https://github.com/xWuWux/Logistic-Regression-training.git
!git push -u origin main

import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

x = np.arange(10).reshape(-1, 1)
y = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1])

model = LogisticRegression(solver='liblinear', random_state=0)
model.fit(x, y)
LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=100,
                   multi_class='warn', n_jobs=None, penalty='l2',
                   random_state=0, solver='liblinear', tol=0.0001, verbose=0,
                   warm_start=False)
model = LogisticRegression(solver='liblinear', random_state=0).fit(x, y)




model.predict_proba(x)
model.predict(x)
model.score(x, y)
confusion_matrix(y, model.predict(x))
cm = confusion_matrix(y, model.predict(x))

fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(cm)
ax.grid(False)
ax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))
ax.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))
ax.set_ylim(1.5, -0.5)
for i in range(2):
    for j in range(2):
        ax.text(j, i, cm[i, j], ha='center', va='center', color='red')
plt.show()


model = LogisticRegression(solver='liblinear', C=10.0, random_state=0)
model.fit(x, y)

model.intercept_

model.classes_

model.coef_

model.predict_proba(x)

print(classification_report(y, model.predict(x)))